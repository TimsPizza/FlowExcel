from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field

# 注意：根据 pyproject.toml，这里使用 Pydantic V1 语法


class FileMeta(BaseModel):
    id: str = Field(
        ...,
        description="Unique identifier for the file (e.g., UUID generated by frontend)",
    )
    alias: str = Field(..., description="User-defined name for the file")
    path: str = Field(..., description="Absolute path to the Excel file")
    header_row: int = Field(..., description="1-based index of the header row")
    sheet_name: Optional[str] = Field(
        None, description="Name of the sheet to read (if not the first)"
    )
    columns: List[str] = Field(
        [], description="List of column names (populated by backend after reading)"
    )


class FileDetailsResponse(BaseModel):
    columns: List[str] = Field(
        ..., description="List of column names found in the file"
    )
    preview_data: List[Dict[str, Any]] = Field(
        ..., description="Preview of the first few rows (serialized)"
    )


class ErrorResponse(BaseModel):
    error_type: str = Field(
        ...,
        description="Category of the error (e.g., 'FileNotFound', 'InvalidHeader', 'ProcessingError')",
    )
    message: str = Field(..., description="Detailed error message")


class SheetInfo(BaseModel):
    sheet_name: str = Field(..., description="Name of the sheet")
    columns: List[str] = Field(
        ..., description="List of column names found in the file"
    )
    preview_data: List[list[Any]] = Field(
        ..., description="Preview of the first few rows (serialized)"
    )


class FilePreviewResponse(BaseModel):
    sheets: List[SheetInfo] = Field(
        ..., description="List of sheet names and their columns"
    )


class IndexValues(BaseModel):
    column: str = Field(..., description="Name of the column")
    data: List[Any] = Field(..., description="List of values")


class PreviewData(BaseModel):
    sheet_name: str = Field(..., description="Name of the sheet")
    columns: List[str] = Field(
        ..., description="List of column names found in the file"
    )
    preview_data: List[list[Any]] = Field(
        ..., description="Preview of the first few rows (serialized)"
    )
    
class PreviewResponse(BaseModel):
    sheets: List[PreviewData] = Field(..., description="List of sheet names and their columns")
    
    
class TryReadHeaderRowResponse(BaseModel):
    column_names: List[Any] = Field(..., description="List of column names")